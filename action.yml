name: "Trivy Summary Action"
description: "Gera summary do Trivy e envia notificação para Power Automate/Teams"
branding:
  icon: "eye"
  color: "gray-dark"
inputs:
  trivy-json:
    description: "Caminho do arquivo JSON de ouput da action Trivy"
    required: true
  docker-image:
    description: "Nome da imagem Docker a ser analisada"
    required: true
outputs:
  critical_count:
    description: "Number of critical vulnerabilities."
    value: ${{ steps.generate_summary.outputs.critical_count }}
  high_count:
    description: "Number of high vulnerabilities."
    value: ${{ steps.generate_summary.outputs.high_count }}
  medium_count:
    description: "Number of medium vulnerabilities."
    value: ${{ steps.generate_summary.outputs.medium_count }}
  low_count:
    description: "Number of low vulnerabilities."
    value: ${{ steps.generate_summary.outputs.low_count }}
  unknown_count:
    description: "Number of unknown vulnerabilities."
    value: ${{ steps.generate_summary.outputs.unknown_count }}
  total_count:
    description: "Total number of vulnerabilities."
    value: ${{ steps.generate_summary.outputs.total_count }}

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Generate Trivy Summary and Send Notification
      id: generate_summary
      shell: bash
      run: |
        TRIVY_JSON="${{ inputs.trivy-json }}"
        IMAGE_TAG="${{ inputs.docker-image }}"

        if [ ! -s "$TRIVY_JSON" ]; then
          echo "Arquivo json de ouput do Trivy não encontrado ou está vazio. As contagens serão zero."
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0
          UNKNOWN_COUNT=0
          TOTAL_COUNT=0
        else
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$TRIVY_JSON")
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$TRIVY_JSON")
          MEDIUM_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$TRIVY_JSON")
          LOW_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "$TRIVY_JSON")
          UNKNOWN_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "UNKNOWN")] | length' "$TRIVY_JSON")
          TOTAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]?] | length' "$TRIVY_JSON")
        fi

        echo "DEBUG (Action Internal): IMAGE_DOCKER=$IMAGE_TAG"
        echo "DEBUG (Action Internal): CRITICAL_COUNT=$CRITICAL_COUNT"
        echo "DEBUG (Action Internal): HIGH_COUNT=$HIGH_COUNT"
        echo "DEBUG (Action Internal): MEDIUM_COUNT=$MEDIUM_COUNT"
        echo "DEBUG (Action Internal): LOW_COUNT=$LOW_COUNT"
        echo "DEBUG (Action Internal): UNKNOWN_COUNT=$UNKNOWN_COUNT"
        echo "DEBUG (Action Internal): TOTAL_COUNT=$TOTAL_COUNT"

        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT
        echo "unknown_count=$UNKNOWN_COUNT" >> $GITHUB_OUTPUT
        echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT

        {
          echo "### Sumário de Vulnerabilidades da Imagem"
          echo ""
          echo "Scan para: \`${IMAGE_TAG}\`"
          echo ""
          echo "| Categoria | Contagem |"
          echo "|---|---|"
          echo "| **Críticas** | **$CRITICAL_COUNT** |"
          echo "| Altas | $HIGH_COUNT |"
          echo "| Médias | $MEDIUM_COUNT |"
          echo "| Baixas | $LOW_COUNT |"
          echo "| Desconhecidas | $UNKNOWN_COUNT |"
          echo "| **Total** | **$TOTAL_COUNT** |"
          echo ""
          echo "---"
          echo "### Detalhes das Vulnerabilidades"
          echo ""
          
          if [ -s "$TRIVY_JSON" ]; then
            jq -c '.Results[]?.Vulnerabilities[]? | select(.VulnerabilityID != null)' "$TRIVY_JSON" | while read -r vuln; do
              VULN_ID=$(echo "$vuln" | jq -r '.VulnerabilityID')
              SEVERITY=$(echo "$vuln" | jq -r '.Severity')
              PKG_NAME=$(echo "$vuln" | jq -r '.PkgName')
              INSTALLED_VER=$(echo "$vuln" | jq -r '.InstalledVersion')
              FIXED_VER=$(echo "$vuln" | jq -r '.FixedVersion // "N/A"')
              STATUS=$(echo "$vuln" | jq -r '.Status // "N/A"')
              TITLE=$(echo "$vuln" | jq -r '.Title // "N/A"')
              DESCRIPTION=$(echo "$vuln" | jq -r '.Description // "N/A" | .[:200] + (if (. | length) > 200 then "..." else "" end)')

              echo "#### $VULN_ID"
              echo "- **Severidade:** $SEVERITY"
              echo "- **Pacote Afetado:** \`$PKG_NAME\` (\`$INSTALLED_VER\`)"
              echo "- **Versão de Correção:** \`$FIXED_VER\`"
              echo "- **Status da Correção:** \`$STATUS\`"
              echo "- **Título:** $TITLE"
              echo "- **Descrição:** $DESCRIPTION"
              echo ""
            done
          else
            echo "Nenhuma vulnerabilidade detalhada para exibir ("$TRIVY_JSON" estava vazio ou não encontrado)."
          fi
          echo "---"
          echo "Para ver o relatório completo e mais detalhes, verifique os logs deste passo."
        } >> "$GITHUB_STEP_SUMMARY"
